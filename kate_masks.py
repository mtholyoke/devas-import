import numpy as np

def get_kate_mask(freqs, response, region_idx=None):
    r = response.lower()
    assert r in kate_mask_ranges.keys(), ('No Kate mask is available for response %s.' % response)
    mask = kate_mask_ranges[r]
    if region_idx is not None:
        mask = [mask[region_idx]]
    return _make_maskf(mask)(freqs)

def _make_maskf(ranges):
    def _maskf(freqs, ranges=ranges):
        m = [np.logical_and(freqs >= minv, freqs <= maxv) for (minv, maxv) in ranges]
        return reduce(np.logical_or, m)
    return _maskf

kate_mask_ranges = {
    'ni'   :[(301.152, 301.438), (300.190, 300.579),
             (440.122, 440.327), (313.305, 313.774),
             (761.485, 762.503), (305.367, 305.679),
             (739.231, 739.877), (741.940, 742.779),
             (303.648, 304.072), (305.030, 305.367)],
    'cr'   :[(519.398, 521.415), (283.386, 283.838),
             (427.450, 427.793), (267.471, 268.133),
             (284.237, 284.536), (425.434, 425.791),
             (313.118, 313.533), (276.525, 277.124),
             (312.413, 312.837), (301.286, 301.681)],
    'zn'   :[(330.181, 330.776), (467.985, 468.500),
             (635.520, 637.690), (255.705, 256.180),
             (334.408, 334.814), (328.105, 328.427),
             (758.374, 759.628), (250.081, 250.554),
             (773.052, 773.891), (609.267, 610.791)],
    'mn'   :[(403.268, 403.790), (270.031, 270.389),
             (288.890, 289.138), (293.841, 294.136),
             (402.995, 403.268), (267.064, 267.626),
             (294.767, 295.256), (600.748, 602.939),
             (293.205, 293.502), (404.043, 404.363)],
    'co'   :[(257.952, 258.487), (399.501, 399.737),
             (533.468, 534.588), (255.865, 256.183),
             (304.318, 304.654), (389.232, 389.798),
             (266.237, 266.605), (269.466, 269.728),
             (411.854, 412.393), (270.591, 271.102)],
    's'    :[(539.046, 541.044), (541.259, 541.920),
             (542.150, 543.918), (547.037, 548.574),
             (560.997, 562.308)],
    'al2o3':[(308.12, 308.55), (309.13, 309.68),
             (395.87, 396.57), (621.64, 625.25),
             (394.14, 394.85), (702.20, 707.50),
             (451.04, 451.77), (465.99, 467.13),
             (683.32, 684.56), (568.14, 570.76)],
    'cao'  :[(445.31, 446.28), (611.05, 613.23),
             (443.17, 444.19), (640.99, 651.55),
             (731.25, 733.38), (713.02, 715.53),
             (317.26, 318.98), (392.00, 394.20),
             (315.67, 316.46), (442.36, 443.06),
             (396.49, 397.35)],
    'fe2o3':[(246.69, 277.41), (283.04, 305.08),
             (388.47, 389.29), (404.19, 441.15)],
    'k2o'  :[(764.36, 768.80), (768.80, 771.77),
             (692.92, 694.85), (690.05, 691.65),
             (454.73, 456.23)],
    'mgo'  :[(292.62, 293.27), (446.09, 450.79),
             (293.44, 294.16), (786.11, 793.42),
             (515.39, 521.68), (278.54, 281.15),
             (284.99, 285.60)],
    'na2o' :[(586.59, 590.74), (816.76, 821.37),
             (312.80, 313.18)],
    'sio2' :[(287.90, 288.74), (632.42, 639.23),
             (456.63, 457.18), (412.45, 414.08),
             (504.99, 508.18), (408.31, 409.59),
             (390.36, 390.97)],
    'tio2' :[(323.35, 324.65), (334.64, 335.44),
             (335.92, 336.64), (336.83, 337.70),
             (333.92, 334.59), (325.10, 325.70),
             (307.79, 308.12), (324.65, 325.10),
             (332.05, 332.62), (322.72, 323.14)]
}
